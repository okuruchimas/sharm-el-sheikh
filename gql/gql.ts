/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query GetAnimationCompanies {\n  animationCompanies(sort: \"index:asc\") {\n    data {\n      attributes {\n        ...AnimationCompanyPreview\n      }\n    }\n  }\n}\n\nquery GetAnimationCompany($slug: String!, $locale: I18NLocaleCode!) {\n  animationCompanies(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      attributes {\n        ...AnimationCompany\n      }\n    }\n  }\n}\n\nfragment AnimationCompanyPreview on AnimationCompany {\n  value\n  slug\n  totalComments\n  averageRating\n  image {\n    ...StrapiImage\n  }\n}\n\nfragment AnimationCompany on AnimationCompany {\n  value\n  slug\n  totalComments\n  averageRating\n  image {\n    ...StrapiImage\n  }\n  about\n  animators {\n    data {\n      attributes {\n        ...AnimatorPreview\n      }\n    }\n  }\n  complaintsNumber\n  employmentNumber\n  location\n  position {\n    lng\n    lat\n  }\n  socialLinks {\n    icon {\n      ...StrapiImage\n    }\n    socialLink\n  }\n  vacancies {\n    title\n    text\n  }\n}": types.GetAnimationCompaniesDocument,
    "query GetAnimatorBySlug($slug: String!, $locale: I18NLocaleCode!) {\n  animators(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      attributes {\n        slug\n        name\n        profileImg {\n          ...StrapiImage\n        }\n        description\n        workingAtClub\n        hotelName\n        animation_company {\n          data {\n            attributes {\n              key\n              value\n            }\n          }\n        }\n        socialLinks {\n          socialLink\n          icon {\n            ...StrapiImage\n          }\n        }\n        skills {\n          value\n        }\n        entertainmentServices {\n          serviceName\n          image {\n            ...StrapiImage\n          }\n          place\n          price\n          duration\n        }\n        languages {\n          data {\n            attributes {\n              key\n              value\n              flagIcon {\n                ...StrapiImage\n              }\n            }\n          }\n        }\n        comments {\n          data {\n            ...Comment\n          }\n        }\n        averageRating\n        totalComments\n      }\n    }\n  }\n}\n\nquery GetAnimatorsByFilter($locale: I18NLocaleCode!, $page: Int, $pageSize: Int, $sort: [String], $companyKey: String, $slugToExclude: String) {\n  animators(\n    locale: $locale\n    sort: $sort\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {animation_company: {key: {eq: $companyKey}}, slug: {ne: $slugToExclude}}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      id\n      attributes {\n        ...AnimatorPreview\n      }\n    }\n  }\n}\n\nquery GetAnimatorsSlugs {\n  animators {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}\n\nfragment AnimatorPreview on Animator {\n  slug\n  name\n  profileImg {\n    ...StrapiImage\n  }\n  animation_company {\n    data {\n      attributes {\n        value\n      }\n    }\n  }\n  hotelName\n  languages {\n    data {\n      attributes {\n        value\n        flagIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  averageRating\n  totalComments\n  workingAtClub\n}": types.GetAnimatorBySlugDocument,
    "fragment Announcement on Announcement {\n  title\n  text\n  image {\n    ...StrapiImage\n  }\n  socialLinks {\n    socialLink\n    icon {\n      ...StrapiImage\n    }\n  }\n}": types.AnnouncementFragmentDoc,
    "query GetCompany($slug: String!, $locale: I18NLocaleCode!) {\n  companies(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      id\n      attributes {\n        ...Company\n      }\n    }\n  }\n}\n\nquery GetCompaniesByFilter($areaKey: String, $category: [String], $locale: I18NLocaleCode!, $page: Int, $pageSize: Int, $slugToExclude: String, $day: String, $discountFilter: ComponentComponentsDiscountFiltersInput) {\n  companies(\n    locale: $locale\n    filters: {area: {key: {eq: $areaKey}}, categories: {key: {in: $category}}, slug: {ne: $slugToExclude}, schedule: {days: {day: {eq: $day}}}, discount: $discountFilter}\n    pagination: {page: $page, pageSize: $pageSize}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      id\n      attributes {\n        ...CompanyPreview\n      }\n    }\n  }\n}\n\nquery GetCompaniesSlugs($category: [String]) {\n  companies(filters: {categories: {key: {in: $category}}}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}\n\nfragment Company on Company {\n  title\n  discount {\n    title\n    terms\n    image {\n      ...StrapiImage\n    }\n  }\n  images {\n    data {\n      id\n      attributes {\n        url\n        alternativeText\n      }\n    }\n  }\n  position {\n    lat\n    lng\n  }\n  description\n  averageRating\n  totalComments\n  services {\n    data {\n      ...Service\n    }\n  }\n  slug\n  location\n  comments {\n    data {\n      ...Comment\n    }\n  }\n  area {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n  categories {\n    data {\n      attributes {\n        key\n      }\n    }\n  }\n  food\n  socialLinks {\n    icon {\n      ...StrapiImage\n    }\n    socialLink\n  }\n  pageData {\n    contactLink\n    contactText\n    youTubeVideoId\n  }\n  phoneNumber\n  schedule {\n    days {\n      day\n    }\n    workTime {\n      startTime\n      endTime\n    }\n  }\n}\n\nfragment CompanyPreview on Company {\n  title\n  schedule {\n    days {\n      day\n    }\n    workTime {\n      startTime\n      endTime\n    }\n  }\n  discount {\n    title\n    terms\n    image {\n      ...StrapiImage\n    }\n  }\n  images {\n    data {\n      attributes {\n        url\n        alternativeText\n      }\n    }\n  }\n  position {\n    lat\n    lng\n  }\n  averageRating\n  totalComments\n  slug\n  location\n  area {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n  categories {\n    data {\n      attributes {\n        key\n        markerIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  socialLinks {\n    socialLink\n    icon {\n      ...StrapiImage\n    }\n  }\n}\n\nfragment Service on ServiceEntity {\n  id\n  attributes {\n    text\n    icon {\n      ...StrapiImage\n    }\n  }\n}\n\nfragment Comment on CommentEntity {\n  id\n  attributes {\n    text\n    rating\n    createdAt\n  }\n}": types.GetCompanyDocument,
    "query GetEventCards($locale: I18NLocaleCode!, $page: Int, $pageSize: Int) {\n  eventCards(\n    locale: $locale\n    sort: \"index:asc\"\n    pagination: {page: $page, pageSize: $pageSize}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      attributes {\n        ...EventCard\n      }\n    }\n  }\n}\n\nfragment EventCard on EventCard {\n  date\n  title\n  price\n  location\n  description\n  socialLinks {\n    socialLink\n    icon {\n      ...StrapiImage\n    }\n  }\n  image {\n    ...StrapiImage\n  }\n  position {\n    lat\n    lng\n  }\n}": types.GetEventCardsDocument,
    "query GetAreas($locale: I18NLocaleCode!) {\n  areas(locale: $locale, sort: \"index:asc\") {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n}\n\nquery GetCategories($locale: I18NLocaleCode!) {\n  categories(locale: $locale, sort: \"index:asc\") {\n    data {\n      attributes {\n        key\n        value\n        icon {\n          ...StrapiImage\n        }\n        markerIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n}\n\nquery GetLanguages($locale: I18NLocaleCode!) {\n  languages(locale: $locale, sort: \"index:asc\") {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n}\n\nquery GetCarClasses($locale: I18NLocaleCode!) {\n  carClasses(locale: $locale) {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n}\n\nquery GetPhotographyStyles($locale: I18NLocaleCode!) {\n  photographyStyles(locale: $locale) {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n}\n\nquery GetLocations($locale: I18NLocaleCode!) {\n  locations(locale: $locale) {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n}\n\nquery GetMedicationCategories($locale: I18NLocaleCode!) {\n  medicationCategories(locale: $locale) {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n}": types.GetAreasDocument,
    "query GetHomePage($locale: I18NLocaleCode!) {\n  home(locale: $locale) {\n    data {\n      attributes {\n        ...HomePage\n      }\n    }\n  }\n}\n\nfragment HomePage on Home {\n  heroTitle\n  eventCardsTitle\n  event_cards {\n    data {\n      attributes {\n        ...EventCard\n      }\n    }\n  }\n  promotionsTitle\n  banner1 {\n    title\n    buttonText\n    buttonLink\n    bannerImage {\n      ...StrapiImage\n    }\n  }\n  announcementsTitle\n  announcements {\n    data {\n      attributes {\n        ...Announcement\n      }\n    }\n  }\n  banner2 {\n    title\n    buttonText\n    buttonLink\n    bannerImage {\n      ...StrapiImage\n    }\n  }\n  mapTitle\n  homeNavMenu {\n    text\n    link\n    image {\n      ...StrapiImage\n    }\n  }\n}": types.GetHomePageDocument,
    "query GetHotspotsPage($locale: I18NLocaleCode!) {\n  hotspotsPage(locale: $locale) {\n    data {\n      attributes {\n        ...HotspotsPage\n      }\n    }\n  }\n}\n\nfragment HotspotsPage on HotspotsPage {\n  eventsTitle\n  clubsTitle\n  clubsInfo\n  mapTitle\n  bottomBanner {\n    title\n    subtitle\n    bannerImage {\n      ...StrapiImage\n    }\n    buttonText\n    buttonLink\n  }\n}": types.GetHotspotsPageDocument,
    "fragment StrapiImage on UploadFileEntityResponse {\n  data {\n    attributes {\n      url\n      alternativeText\n    }\n  }\n}": types.StrapiImageFragmentDoc,
    "query GetHeader($locale: I18NLocaleCode!) {\n  header(locale: $locale) {\n    data {\n      attributes {\n        ...Header\n      }\n    }\n  }\n}\n\nquery GetFooter($locale: I18NLocaleCode!) {\n  footer(locale: $locale) {\n    data {\n      attributes {\n        ...Footer\n      }\n    }\n  }\n}\n\nfragment Header on Header {\n  Logo {\n    ...StrapiImage\n  }\n  Menu {\n    id\n    Text\n    Link\n  }\n}\n\nfragment Footer on Footer {\n  socialIcons {\n    icon {\n      ...StrapiImage\n    }\n    socialLink\n  }\n}": types.GetHeaderDocument,
    "query GetMedicationBySlug($slug: String!, $locale: I18NLocaleCode!) {\n  medications(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      attributes {\n        ...Medication\n      }\n    }\n  }\n}\n\nquery GetMedicationsByFilter($locale: I18NLocaleCode!, $page: Int, $pageSize: Int, $categories: [String], $nameFilter: String) {\n  medications(\n    locale: $locale\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {medication_categories: {key: {in: $categories}}, or: [{name: {containsi: $nameFilter}}, {analogs: {containsi: $nameFilter}}]}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      id\n      attributes {\n        ...MedicationPreview\n      }\n    }\n  }\n}\n\nquery GetMedicationsNames($locale: I18NLocaleCode!, $nameFilter: String) {\n  medications(\n    locale: $locale\n    filters: {or: [{name: {containsi: $nameFilter}}, {analogs: {containsi: $nameFilter}}]}\n  ) {\n    data {\n      id\n      attributes {\n        slug\n        name\n      }\n    }\n  }\n}\n\nfragment Medication on Medication {\n  slug\n  name\n  price\n  image {\n    ...StrapiImage\n  }\n  analogs\n  medication_categories {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n  location\n  indications {\n    value\n  }\n  dosage {\n    value\n  }\n  contraindications {\n    value\n  }\n  sideEffects {\n    value\n  }\n  storage {\n    value\n  }\n  warnings {\n    value\n  }\n}\n\nfragment MedicationPreview on Medication {\n  slug\n  name\n  price\n  analogs\n  image {\n    ...StrapiImage\n  }\n  medication_categories {\n    data {\n      attributes {\n        value\n      }\n    }\n  }\n}": types.GetMedicationBySlugDocument,
    "query GetPharmaciesPage($locale: I18NLocaleCode!) {\n  pharmaciesPage(locale: $locale) {\n    data {\n      attributes {\n        ...PharmaciesPage\n      }\n    }\n  }\n}\n\nfragment PharmaciesPage on PharmaciesPage {\n  mapTitle\n  medicationsTitle\n  supportServicesTitle\n  embassiesDescription\n  assistanceDescription\n  emergencyDescription\n  categories {\n    data {\n      attributes {\n        key\n        value\n        icon {\n          ...StrapiImage\n        }\n        markerIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  filterTitle\n}": types.GetPharmaciesPageDocument,
    "query GetPhotographerBySlug($slug: String!, $locale: I18NLocaleCode!) {\n  photographers(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      attributes {\n        ...Photographer\n      }\n    }\n  }\n}\n\nquery GetPhotographersByFilters($locale: I18NLocaleCode!, $page: Int, $pageSize: Int, $sort: [String], $styles: [String], $locations: [String], $slugToExclude: String) {\n  photographers(\n    sort: $sort\n    locale: $locale\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {photography_styles: {key: {in: $styles}}, locations: {key: {in: $locations}}, slug: {ne: $slugToExclude}}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      attributes {\n        ...Photographer\n      }\n    }\n  }\n}\n\nfragment Photographer on Photographer {\n  slug\n  name\n  profileImg {\n    ...StrapiImage\n  }\n  socialLinks {\n    icon {\n      ...StrapiImage\n    }\n    socialLink\n  }\n  languages {\n    data {\n      attributes {\n        key\n        value\n        flagIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  comments {\n    data {\n      ...Comment\n    }\n  }\n  photography_styles {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n  locations {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n  description\n  averageRating\n  totalComments\n}\n\nquery GetPhotographersSlugs {\n  photographers {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}": types.GetPhotographerBySlugDocument,
    "query GetSupportServices($locale: I18NLocaleCode!, $page: Int, $pageSize: Int) {\n  supportServices(locale: $locale, pagination: {page: $page, pageSize: $pageSize}) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      attributes {\n        ...SupportService\n      }\n    }\n  }\n}\n\nfragment SupportService on SupportService {\n  name\n  phoneNumber\n  location\n  mapLink\n  image {\n    ...StrapiImage\n  }\n  category\n}": types.GetSupportServicesDocument,
    "query GetDriverBySlug($slug: String!, $locale: I18NLocaleCode!) {\n  taxiDrivers(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      attributes {\n        slug\n        name\n        profileImg {\n          ...StrapiImage\n        }\n        carModel\n        carName\n        car_class {\n          data {\n            attributes {\n              key\n              value\n              circleIcon {\n                ...StrapiImage\n              }\n            }\n          }\n        }\n        isNotWorking\n        passengersNum\n        preferences {\n          value\n        }\n        schedule {\n          dayOfWeek\n          timeSlots {\n            startTime\n            endTime\n          }\n        }\n        socialLinks {\n          icon {\n            ...StrapiImage\n          }\n          socialLink\n        }\n        languages {\n          data {\n            attributes {\n              key\n              value\n              flagIcon {\n                ...StrapiImage\n              }\n            }\n          }\n        }\n        comments {\n          data {\n            ...Comment\n          }\n        }\n        averageRating\n        totalComments\n        taxi_services {\n          data {\n            attributes {\n              title\n              subTitle\n              icon {\n                ...StrapiImage\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetDriversByFilters($locale: I18NLocaleCode!, $page: Int, $pageSize: Int, $sort: [String], $languageKeys: [String], $timeFilters: ComponentComponentsWorkScheduleFiltersInput, $carClasses: [String], $slugToExclude: String) {\n  taxiDrivers(\n    sort: $sort\n    locale: $locale\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {languages: {key: {in: $languageKeys}}, schedule: $timeFilters, car_class: {key: {in: $carClasses}}, slug: {ne: $slugToExclude}}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      attributes {\n        ...TaxiDriverPreview\n      }\n    }\n  }\n}\n\nfragment TaxiDriverPreview on TaxiDriver {\n  slug\n  name\n  profileImg {\n    ...StrapiImage\n  }\n  schedule {\n    dayOfWeek\n    timeSlots {\n      startTime\n      endTime\n    }\n  }\n  languages {\n    data {\n      attributes {\n        value\n        flagIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  car_class {\n    data {\n      attributes {\n        value\n        icon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  totalComments\n  averageRating\n  isNotWorking\n}\n\nquery GetDriversSlugs {\n  taxiDrivers {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}": types.GetDriverBySlugDocument,
    "query GetTourGuideBySlug($slug: String!, $locale: I18NLocaleCode!) {\n  tourGuides(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      attributes {\n        ...TourGuide\n      }\n    }\n  }\n}\n\nquery GetTourGuidesByFilters($locale: I18NLocaleCode!, $page: Int, $pageSize: Int, $sort: [String], $slugToExclude: String) {\n  tourGuides(\n    sort: $sort\n    locale: $locale\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {slug: {ne: $slugToExclude}}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      attributes {\n        ...TourGuide\n      }\n    }\n  }\n}\n\nfragment TourGuide on TourGuide {\n  slug\n  name\n  profileImg {\n    ...StrapiImage\n  }\n  socialLinks {\n    icon {\n      ...StrapiImage\n    }\n    socialLink\n  }\n  languages {\n    data {\n      attributes {\n        key\n        value\n        flagIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  comments {\n    data {\n      ...Comment\n    }\n  }\n  tours\n  description\n  averageRating\n  totalComments\n}\n\nquery GetTourGuidesSlugs {\n  tourGuides {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}": types.GetTourGuideBySlugDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAnimationCompanies {\n  animationCompanies(sort: \"index:asc\") {\n    data {\n      attributes {\n        ...AnimationCompanyPreview\n      }\n    }\n  }\n}\n\nquery GetAnimationCompany($slug: String!, $locale: I18NLocaleCode!) {\n  animationCompanies(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      attributes {\n        ...AnimationCompany\n      }\n    }\n  }\n}\n\nfragment AnimationCompanyPreview on AnimationCompany {\n  value\n  slug\n  totalComments\n  averageRating\n  image {\n    ...StrapiImage\n  }\n}\n\nfragment AnimationCompany on AnimationCompany {\n  value\n  slug\n  totalComments\n  averageRating\n  image {\n    ...StrapiImage\n  }\n  about\n  animators {\n    data {\n      attributes {\n        ...AnimatorPreview\n      }\n    }\n  }\n  complaintsNumber\n  employmentNumber\n  location\n  position {\n    lng\n    lat\n  }\n  socialLinks {\n    icon {\n      ...StrapiImage\n    }\n    socialLink\n  }\n  vacancies {\n    title\n    text\n  }\n}"): typeof import('./graphql').GetAnimationCompaniesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAnimatorBySlug($slug: String!, $locale: I18NLocaleCode!) {\n  animators(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      attributes {\n        slug\n        name\n        profileImg {\n          ...StrapiImage\n        }\n        description\n        workingAtClub\n        hotelName\n        animation_company {\n          data {\n            attributes {\n              key\n              value\n            }\n          }\n        }\n        socialLinks {\n          socialLink\n          icon {\n            ...StrapiImage\n          }\n        }\n        skills {\n          value\n        }\n        entertainmentServices {\n          serviceName\n          image {\n            ...StrapiImage\n          }\n          place\n          price\n          duration\n        }\n        languages {\n          data {\n            attributes {\n              key\n              value\n              flagIcon {\n                ...StrapiImage\n              }\n            }\n          }\n        }\n        comments {\n          data {\n            ...Comment\n          }\n        }\n        averageRating\n        totalComments\n      }\n    }\n  }\n}\n\nquery GetAnimatorsByFilter($locale: I18NLocaleCode!, $page: Int, $pageSize: Int, $sort: [String], $companyKey: String, $slugToExclude: String) {\n  animators(\n    locale: $locale\n    sort: $sort\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {animation_company: {key: {eq: $companyKey}}, slug: {ne: $slugToExclude}}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      id\n      attributes {\n        ...AnimatorPreview\n      }\n    }\n  }\n}\n\nquery GetAnimatorsSlugs {\n  animators {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}\n\nfragment AnimatorPreview on Animator {\n  slug\n  name\n  profileImg {\n    ...StrapiImage\n  }\n  animation_company {\n    data {\n      attributes {\n        value\n      }\n    }\n  }\n  hotelName\n  languages {\n    data {\n      attributes {\n        value\n        flagIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  averageRating\n  totalComments\n  workingAtClub\n}"): typeof import('./graphql').GetAnimatorBySlugDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Announcement on Announcement {\n  title\n  text\n  image {\n    ...StrapiImage\n  }\n  socialLinks {\n    socialLink\n    icon {\n      ...StrapiImage\n    }\n  }\n}"): typeof import('./graphql').AnnouncementFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCompany($slug: String!, $locale: I18NLocaleCode!) {\n  companies(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      id\n      attributes {\n        ...Company\n      }\n    }\n  }\n}\n\nquery GetCompaniesByFilter($areaKey: String, $category: [String], $locale: I18NLocaleCode!, $page: Int, $pageSize: Int, $slugToExclude: String, $day: String, $discountFilter: ComponentComponentsDiscountFiltersInput) {\n  companies(\n    locale: $locale\n    filters: {area: {key: {eq: $areaKey}}, categories: {key: {in: $category}}, slug: {ne: $slugToExclude}, schedule: {days: {day: {eq: $day}}}, discount: $discountFilter}\n    pagination: {page: $page, pageSize: $pageSize}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      id\n      attributes {\n        ...CompanyPreview\n      }\n    }\n  }\n}\n\nquery GetCompaniesSlugs($category: [String]) {\n  companies(filters: {categories: {key: {in: $category}}}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}\n\nfragment Company on Company {\n  title\n  discount {\n    title\n    terms\n    image {\n      ...StrapiImage\n    }\n  }\n  images {\n    data {\n      id\n      attributes {\n        url\n        alternativeText\n      }\n    }\n  }\n  position {\n    lat\n    lng\n  }\n  description\n  averageRating\n  totalComments\n  services {\n    data {\n      ...Service\n    }\n  }\n  slug\n  location\n  comments {\n    data {\n      ...Comment\n    }\n  }\n  area {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n  categories {\n    data {\n      attributes {\n        key\n      }\n    }\n  }\n  food\n  socialLinks {\n    icon {\n      ...StrapiImage\n    }\n    socialLink\n  }\n  pageData {\n    contactLink\n    contactText\n    youTubeVideoId\n  }\n  phoneNumber\n  schedule {\n    days {\n      day\n    }\n    workTime {\n      startTime\n      endTime\n    }\n  }\n}\n\nfragment CompanyPreview on Company {\n  title\n  schedule {\n    days {\n      day\n    }\n    workTime {\n      startTime\n      endTime\n    }\n  }\n  discount {\n    title\n    terms\n    image {\n      ...StrapiImage\n    }\n  }\n  images {\n    data {\n      attributes {\n        url\n        alternativeText\n      }\n    }\n  }\n  position {\n    lat\n    lng\n  }\n  averageRating\n  totalComments\n  slug\n  location\n  area {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n  categories {\n    data {\n      attributes {\n        key\n        markerIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  socialLinks {\n    socialLink\n    icon {\n      ...StrapiImage\n    }\n  }\n}\n\nfragment Service on ServiceEntity {\n  id\n  attributes {\n    text\n    icon {\n      ...StrapiImage\n    }\n  }\n}\n\nfragment Comment on CommentEntity {\n  id\n  attributes {\n    text\n    rating\n    createdAt\n  }\n}"): typeof import('./graphql').GetCompanyDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetEventCards($locale: I18NLocaleCode!, $page: Int, $pageSize: Int) {\n  eventCards(\n    locale: $locale\n    sort: \"index:asc\"\n    pagination: {page: $page, pageSize: $pageSize}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      attributes {\n        ...EventCard\n      }\n    }\n  }\n}\n\nfragment EventCard on EventCard {\n  date\n  title\n  price\n  location\n  description\n  socialLinks {\n    socialLink\n    icon {\n      ...StrapiImage\n    }\n  }\n  image {\n    ...StrapiImage\n  }\n  position {\n    lat\n    lng\n  }\n}"): typeof import('./graphql').GetEventCardsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAreas($locale: I18NLocaleCode!) {\n  areas(locale: $locale, sort: \"index:asc\") {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n}\n\nquery GetCategories($locale: I18NLocaleCode!) {\n  categories(locale: $locale, sort: \"index:asc\") {\n    data {\n      attributes {\n        key\n        value\n        icon {\n          ...StrapiImage\n        }\n        markerIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n}\n\nquery GetLanguages($locale: I18NLocaleCode!) {\n  languages(locale: $locale, sort: \"index:asc\") {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n}\n\nquery GetCarClasses($locale: I18NLocaleCode!) {\n  carClasses(locale: $locale) {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n}\n\nquery GetPhotographyStyles($locale: I18NLocaleCode!) {\n  photographyStyles(locale: $locale) {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n}\n\nquery GetLocations($locale: I18NLocaleCode!) {\n  locations(locale: $locale) {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n}\n\nquery GetMedicationCategories($locale: I18NLocaleCode!) {\n  medicationCategories(locale: $locale) {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n}"): typeof import('./graphql').GetAreasDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetHomePage($locale: I18NLocaleCode!) {\n  home(locale: $locale) {\n    data {\n      attributes {\n        ...HomePage\n      }\n    }\n  }\n}\n\nfragment HomePage on Home {\n  heroTitle\n  eventCardsTitle\n  event_cards {\n    data {\n      attributes {\n        ...EventCard\n      }\n    }\n  }\n  promotionsTitle\n  banner1 {\n    title\n    buttonText\n    buttonLink\n    bannerImage {\n      ...StrapiImage\n    }\n  }\n  announcementsTitle\n  announcements {\n    data {\n      attributes {\n        ...Announcement\n      }\n    }\n  }\n  banner2 {\n    title\n    buttonText\n    buttonLink\n    bannerImage {\n      ...StrapiImage\n    }\n  }\n  mapTitle\n  homeNavMenu {\n    text\n    link\n    image {\n      ...StrapiImage\n    }\n  }\n}"): typeof import('./graphql').GetHomePageDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetHotspotsPage($locale: I18NLocaleCode!) {\n  hotspotsPage(locale: $locale) {\n    data {\n      attributes {\n        ...HotspotsPage\n      }\n    }\n  }\n}\n\nfragment HotspotsPage on HotspotsPage {\n  eventsTitle\n  clubsTitle\n  clubsInfo\n  mapTitle\n  bottomBanner {\n    title\n    subtitle\n    bannerImage {\n      ...StrapiImage\n    }\n    buttonText\n    buttonLink\n  }\n}"): typeof import('./graphql').GetHotspotsPageDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment StrapiImage on UploadFileEntityResponse {\n  data {\n    attributes {\n      url\n      alternativeText\n    }\n  }\n}"): typeof import('./graphql').StrapiImageFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetHeader($locale: I18NLocaleCode!) {\n  header(locale: $locale) {\n    data {\n      attributes {\n        ...Header\n      }\n    }\n  }\n}\n\nquery GetFooter($locale: I18NLocaleCode!) {\n  footer(locale: $locale) {\n    data {\n      attributes {\n        ...Footer\n      }\n    }\n  }\n}\n\nfragment Header on Header {\n  Logo {\n    ...StrapiImage\n  }\n  Menu {\n    id\n    Text\n    Link\n  }\n}\n\nfragment Footer on Footer {\n  socialIcons {\n    icon {\n      ...StrapiImage\n    }\n    socialLink\n  }\n}"): typeof import('./graphql').GetHeaderDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetMedicationBySlug($slug: String!, $locale: I18NLocaleCode!) {\n  medications(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      attributes {\n        ...Medication\n      }\n    }\n  }\n}\n\nquery GetMedicationsByFilter($locale: I18NLocaleCode!, $page: Int, $pageSize: Int, $categories: [String], $nameFilter: String) {\n  medications(\n    locale: $locale\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {medication_categories: {key: {in: $categories}}, or: [{name: {containsi: $nameFilter}}, {analogs: {containsi: $nameFilter}}]}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      id\n      attributes {\n        ...MedicationPreview\n      }\n    }\n  }\n}\n\nquery GetMedicationsNames($locale: I18NLocaleCode!, $nameFilter: String) {\n  medications(\n    locale: $locale\n    filters: {or: [{name: {containsi: $nameFilter}}, {analogs: {containsi: $nameFilter}}]}\n  ) {\n    data {\n      id\n      attributes {\n        slug\n        name\n      }\n    }\n  }\n}\n\nfragment Medication on Medication {\n  slug\n  name\n  price\n  image {\n    ...StrapiImage\n  }\n  analogs\n  medication_categories {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n  location\n  indications {\n    value\n  }\n  dosage {\n    value\n  }\n  contraindications {\n    value\n  }\n  sideEffects {\n    value\n  }\n  storage {\n    value\n  }\n  warnings {\n    value\n  }\n}\n\nfragment MedicationPreview on Medication {\n  slug\n  name\n  price\n  analogs\n  image {\n    ...StrapiImage\n  }\n  medication_categories {\n    data {\n      attributes {\n        value\n      }\n    }\n  }\n}"): typeof import('./graphql').GetMedicationBySlugDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetPharmaciesPage($locale: I18NLocaleCode!) {\n  pharmaciesPage(locale: $locale) {\n    data {\n      attributes {\n        ...PharmaciesPage\n      }\n    }\n  }\n}\n\nfragment PharmaciesPage on PharmaciesPage {\n  mapTitle\n  medicationsTitle\n  supportServicesTitle\n  embassiesDescription\n  assistanceDescription\n  emergencyDescription\n  categories {\n    data {\n      attributes {\n        key\n        value\n        icon {\n          ...StrapiImage\n        }\n        markerIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  filterTitle\n}"): typeof import('./graphql').GetPharmaciesPageDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetPhotographerBySlug($slug: String!, $locale: I18NLocaleCode!) {\n  photographers(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      attributes {\n        ...Photographer\n      }\n    }\n  }\n}\n\nquery GetPhotographersByFilters($locale: I18NLocaleCode!, $page: Int, $pageSize: Int, $sort: [String], $styles: [String], $locations: [String], $slugToExclude: String) {\n  photographers(\n    sort: $sort\n    locale: $locale\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {photography_styles: {key: {in: $styles}}, locations: {key: {in: $locations}}, slug: {ne: $slugToExclude}}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      attributes {\n        ...Photographer\n      }\n    }\n  }\n}\n\nfragment Photographer on Photographer {\n  slug\n  name\n  profileImg {\n    ...StrapiImage\n  }\n  socialLinks {\n    icon {\n      ...StrapiImage\n    }\n    socialLink\n  }\n  languages {\n    data {\n      attributes {\n        key\n        value\n        flagIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  comments {\n    data {\n      ...Comment\n    }\n  }\n  photography_styles {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n  locations {\n    data {\n      attributes {\n        key\n        value\n      }\n    }\n  }\n  description\n  averageRating\n  totalComments\n}\n\nquery GetPhotographersSlugs {\n  photographers {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}"): typeof import('./graphql').GetPhotographerBySlugDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetSupportServices($locale: I18NLocaleCode!, $page: Int, $pageSize: Int) {\n  supportServices(locale: $locale, pagination: {page: $page, pageSize: $pageSize}) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      attributes {\n        ...SupportService\n      }\n    }\n  }\n}\n\nfragment SupportService on SupportService {\n  name\n  phoneNumber\n  location\n  mapLink\n  image {\n    ...StrapiImage\n  }\n  category\n}"): typeof import('./graphql').GetSupportServicesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetDriverBySlug($slug: String!, $locale: I18NLocaleCode!) {\n  taxiDrivers(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      attributes {\n        slug\n        name\n        profileImg {\n          ...StrapiImage\n        }\n        carModel\n        carName\n        car_class {\n          data {\n            attributes {\n              key\n              value\n              circleIcon {\n                ...StrapiImage\n              }\n            }\n          }\n        }\n        isNotWorking\n        passengersNum\n        preferences {\n          value\n        }\n        schedule {\n          dayOfWeek\n          timeSlots {\n            startTime\n            endTime\n          }\n        }\n        socialLinks {\n          icon {\n            ...StrapiImage\n          }\n          socialLink\n        }\n        languages {\n          data {\n            attributes {\n              key\n              value\n              flagIcon {\n                ...StrapiImage\n              }\n            }\n          }\n        }\n        comments {\n          data {\n            ...Comment\n          }\n        }\n        averageRating\n        totalComments\n        taxi_services {\n          data {\n            attributes {\n              title\n              subTitle\n              icon {\n                ...StrapiImage\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetDriversByFilters($locale: I18NLocaleCode!, $page: Int, $pageSize: Int, $sort: [String], $languageKeys: [String], $timeFilters: ComponentComponentsWorkScheduleFiltersInput, $carClasses: [String], $slugToExclude: String) {\n  taxiDrivers(\n    sort: $sort\n    locale: $locale\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {languages: {key: {in: $languageKeys}}, schedule: $timeFilters, car_class: {key: {in: $carClasses}}, slug: {ne: $slugToExclude}}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      attributes {\n        ...TaxiDriverPreview\n      }\n    }\n  }\n}\n\nfragment TaxiDriverPreview on TaxiDriver {\n  slug\n  name\n  profileImg {\n    ...StrapiImage\n  }\n  schedule {\n    dayOfWeek\n    timeSlots {\n      startTime\n      endTime\n    }\n  }\n  languages {\n    data {\n      attributes {\n        value\n        flagIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  car_class {\n    data {\n      attributes {\n        value\n        icon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  totalComments\n  averageRating\n  isNotWorking\n}\n\nquery GetDriversSlugs {\n  taxiDrivers {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}"): typeof import('./graphql').GetDriverBySlugDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetTourGuideBySlug($slug: String!, $locale: I18NLocaleCode!) {\n  tourGuides(filters: {slug: {eq: $slug}}, locale: $locale) {\n    data {\n      attributes {\n        ...TourGuide\n      }\n    }\n  }\n}\n\nquery GetTourGuidesByFilters($locale: I18NLocaleCode!, $page: Int, $pageSize: Int, $sort: [String], $slugToExclude: String) {\n  tourGuides(\n    sort: $sort\n    locale: $locale\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {slug: {ne: $slugToExclude}}\n  ) {\n    meta {\n      pagination {\n        total\n      }\n    }\n    data {\n      attributes {\n        ...TourGuide\n      }\n    }\n  }\n}\n\nfragment TourGuide on TourGuide {\n  slug\n  name\n  profileImg {\n    ...StrapiImage\n  }\n  socialLinks {\n    icon {\n      ...StrapiImage\n    }\n    socialLink\n  }\n  languages {\n    data {\n      attributes {\n        key\n        value\n        flagIcon {\n          ...StrapiImage\n        }\n      }\n    }\n  }\n  comments {\n    data {\n      ...Comment\n    }\n  }\n  tours\n  description\n  averageRating\n  totalComments\n}\n\nquery GetTourGuidesSlugs {\n  tourGuides {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}"): typeof import('./graphql').GetTourGuideBySlugDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
